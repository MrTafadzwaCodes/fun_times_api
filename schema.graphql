type Error {
  error: String!
  source: String!
}

type MarketData {
  marketCap: Float
  price: Float!
  source: String!
  symbol: String!
  volume: Float
}

type MarketDataResult {
  errors: [Error!]
  marketData: [MarketData!]
  success: Boolean!
}

type Mutation {
  tradeExecution(
    """
    Parameters for TradeExecutionMutation
    """
    input: TradeExecutionMutationInput!
  ): TradeExecutionResult!
}

type Query {
  marketDataQuery(coinSymbol: String!): MarketDataResult!
  sentimentQuery(coinSymbol: String!): SentimentResult!
}

type SentimentResult {
  errors: [Error!]!
  sentimentScores: [SentimentScore!]
  success: Boolean!
}

type SentimentScore {
  score: Float!
  source: String!
}

type TradeDetails {
  executedPrice: Float
  orderId: String!
  quantity: Float!
  source: String!
  status: String!
}

input TradeExecutionInput {
  action: String!
  preferredExchange: String
  price: Float
  quantity: Float!
  symbol: String!
}

"""
Autogenerated input type of TradeExecutionMutation
"""
input TradeExecutionMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  input: TradeExecutionInput!
}

type TradeExecutionResult {
  errors: [Error!]
  success: Boolean!
  trade: TradeDetails
}
